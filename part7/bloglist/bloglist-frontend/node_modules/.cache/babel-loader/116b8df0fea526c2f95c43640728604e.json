{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/alexdring/Documents/fullstackopen/part0-part9-excercises/part7/bloglist/bloglist-frontend/src/components/Togglable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useImperativeHandle } from 'react';\nimport PropTypes from 'prop-types'; // const Togglable = (props) => {\n\nconst Togglable = /*#__PURE__*/React.forwardRef(_c = _s((props, ref) => {\n  _s();\n\n  // TODO React.forwardRef creates a React component that forwards the ref attribute it receives to another component below in the tree. - https://fullstackopen.com/en/part5/props_children_and_proptypes#references-to-components-with-ref \n  const [visibility, setVisibility] = useState(false);\n  const hideWhenVisible = {\n    display: visibility ? 'none' : ''\n  };\n  const showWhenVisible = {\n    display: visibility ? '' : 'none'\n  };\n\n  const visibilityToggle = () => {\n    setVisibility(!visibility);\n  };\n\n  useImperativeHandle(ref, () => {\n    return {\n      visibilityToggle\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: hideWhenVisible,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"visibility-show\",\n        onClick: visibilityToggle,\n        children: props.buttonLabel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: showWhenVisible,\n      children: [props.children, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: visibilityToggle,\n        children: \"cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}, \"bdU2ipB9ViCiekHcYJ4YjH903Qw=\", false, function () {\n  return [useImperativeHandle];\n}));\n_c2 = Togglable;\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired\n};\nexport default Togglable;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Togglable$React.forwardRef\");\n$RefreshReg$(_c2, \"Togglable\");","map":{"version":3,"sources":["/Users/alexdring/Documents/fullstackopen/part0-part9-excercises/part7/bloglist/bloglist-frontend/src/components/Togglable.js"],"names":["React","useState","useImperativeHandle","PropTypes","Togglable","forwardRef","props","ref","visibility","setVisibility","hideWhenVisible","display","showWhenVisible","visibilityToggle","buttonLabel","children","propTypes","string","isRequired"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,mBAA1B,QAAqD,OAArD;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,MAAMC,SAAS,gBAAGJ,KAAK,CAACK,UAAN,SAAiB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAAA;;AAAE;AAErD,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,KAAD,CAA5C;AAEE,QAAMS,eAAe,GAAG;AAAEC,IAAAA,OAAO,EAAEH,UAAU,GAAG,MAAH,GAAY;AAAjC,GAAxB;AACA,QAAMI,eAAe,GAAG;AAAED,IAAAA,OAAO,EAAEH,UAAU,GAAG,EAAH,GAAQ;AAA7B,GAAxB;;AAEA,QAAMK,gBAAgB,GAAG,MAAM;AAC7BJ,IAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACD,GAFD;;AAIAN,EAAAA,mBAAmB,CAACK,GAAD,EAAM,MAAM;AAC7B,WAAO;AACLM,MAAAA;AADK,KAAP;AAGD,GAJkB,CAAnB;AAMA,sBACE;AAAA,4BACE;AAAK,MAAA,KAAK,EAAEH,eAAZ;AAAA,6BACE;AAAQ,QAAA,EAAE,EAAC,iBAAX;AAA6B,QAAA,OAAO,EAAEG,gBAAtC;AAAA,kBAAyDP,KAAK,CAACQ;AAA/D;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAK,MAAA,KAAK,EAAEF,eAAZ;AAAA,iBACGN,KAAK,CAACS,QADT,eAEE;AAAQ,QAAA,OAAO,EAAEF,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA5BiB;AAAA,UAWhBX,mBAXgB;AAAA,GAAlB;MAAME,S;AA6BNA,SAAS,CAACY,SAAV,GAAsB;AACpBF,EAAAA,WAAW,EAAEX,SAAS,CAACc,MAAV,CAAiBC;AADV,CAAtB;AAIA,eAAed,SAAf","sourcesContent":["import React, { useState, useImperativeHandle } from 'react'\nimport PropTypes from 'prop-types'\n\n// const Togglable = (props) => {\nconst Togglable = React.forwardRef((props, ref) => { // TODO React.forwardRef creates a React component that forwards the ref attribute it receives to another component below in the tree. - https://fullstackopen.com/en/part5/props_children_and_proptypes#references-to-components-with-ref \n  \nconst [visibility, setVisibility] = useState(false)\n\n  const hideWhenVisible = { display: visibility ? 'none' : '' }\n  const showWhenVisible = { display: visibility ? '' : 'none' }\n\n  const visibilityToggle = () => {\n    setVisibility(!visibility)\n  }\n\n  useImperativeHandle(ref, () => {\n    return {\n      visibilityToggle\n    }\n  })\n\n  return(\n    <div>\n      <div style={hideWhenVisible}>\n        <button id='visibility-show' onClick={visibilityToggle}>{props.buttonLabel}</button>\n      </div>\n      <div style={showWhenVisible}>\n        {props.children}\n        <button onClick={visibilityToggle}>cancel</button>\n      </div>\n    </div>\n  )\n})\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired\n}\n\nexport default Togglable"]},"metadata":{},"sourceType":"module"}