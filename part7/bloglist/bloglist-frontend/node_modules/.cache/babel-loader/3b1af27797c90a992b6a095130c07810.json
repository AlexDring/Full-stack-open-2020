{"ast":null,"code":"import blogService from '../services/blogs';\n\nconst byLikes = (a1, a2) => a2.likes - a1.likes;\n\nconst blogReducer = (state = [], action) => {\n  console.log('state now: ', state);\n  console.log('action', action);\n\n  switch (action.type) {\n    case 'INIT_BLOGS':\n      {\n        return action.payload;\n      }\n\n    case 'NEW_BLOG':\n      {\n        return [...state, action.content];\n      }\n\n    case 'INCREASE_LIKES':\n      {\n        const likedBlog = action.data;\n        return state.map(blog => likedBlog.id === blog.id ? likedBlog : blog).sort(byLikes); // return console.log(state.map(blog => console.log(typeof blog.id)), typeof action.data.id)\n      }\n\n    case 'DELETE_BLOG':\n      {\n        console.log(action.data);\n        return state.filter(blog => blog.id !== action.data);\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const initBlogs = () => {\n  return async dispatch => {\n    const blogs = await blogService.getAll();\n    dispatch({\n      type: 'INIT_BLOGS',\n      payload: blogs\n    });\n  };\n};\nexport const createBlog = content => {\n  return async dispatch => {\n    dispatch({\n      type: 'NEW_BLOG',\n      content\n    });\n  };\n};\nexport const increaseLikes = blog => {\n  return async dispatch => {\n    const updateLikes = await blogService.update({ ...blog,\n      likes: blog.likes + 1,\n      user: blog.user.id\n    });\n    dispatch({\n      type: 'INCREASE_LIKES',\n      payload: updateLikes\n    });\n  };\n};\nexport const deleteBlog = id => {\n  return async dispatch => {\n    await blogService.deleteBlog(id);\n    dispatch({\n      type: 'DELETE_BLOG',\n      data: id\n    });\n  };\n};\nexport default blogReducer;","map":{"version":3,"sources":["/Users/alexdring/Documents/fullstackopen/part0-part9-excercises/part7/bloglist/bloglist-frontend/src/reducers/blogReducer.js"],"names":["blogService","byLikes","a1","a2","likes","blogReducer","state","action","console","log","type","payload","content","likedBlog","data","map","blog","id","sort","filter","initBlogs","dispatch","blogs","getAll","createBlog","increaseLikes","updateLikes","update","user","deleteBlog"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,mBAAxB;;AAEA,MAAMC,OAAO,GAAG,CAACC,EAAD,EAAKC,EAAL,KAAYA,EAAE,CAACC,KAAH,GAAWF,EAAE,CAACE,KAA1C;;AAEA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC1CC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,KAA3B;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,MAAtB;;AACA,UAAOA,MAAM,CAACG,IAAd;AACA,SAAK,YAAL;AAAmB;AACjB,eAAOH,MAAM,CAACI,OAAd;AACD;;AACD,SAAK,UAAL;AAAiB;AACf,eAAO,CAAC,GAAGL,KAAJ,EAAWC,MAAM,CAACK,OAAlB,CAAP;AACD;;AACD,SAAK,gBAAL;AAAuB;AACrB,cAAMC,SAAS,GAAGN,MAAM,CAACO,IAAzB;AACA,eAAOR,KAAK,CAACS,GAAN,CAAUC,IAAI,IAAIH,SAAS,CAACI,EAAV,KAAeD,IAAI,CAACC,EAApB,GAAyBJ,SAAzB,GAAqCG,IAAvD,EAA6DE,IAA7D,CAAkEjB,OAAlE,CAAP,CAFqB,CAGrB;AACD;;AACD,SAAK,aAAL;AAAoB;AAClBO,QAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACO,IAAnB;AACA,eAAOR,KAAK,CAACa,MAAN,CAAaH,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYV,MAAM,CAACO,IAAxC,CAAP;AACD;;AACD;AACE,aAAOR,KAAP;AAjBF;AAmBD,CAtBD;;AAwBA,OAAO,MAAMc,SAAS,GAAG,MAAM;AAC7B,SAAO,MAAMC,QAAN,IAAkB;AACvB,UAAMC,KAAK,GAAG,MAAMtB,WAAW,CAACuB,MAAZ,EAApB;AACAF,IAAAA,QAAQ,CAAC;AACPX,MAAAA,IAAI,EAAE,YADC;AAEPC,MAAAA,OAAO,EAAEW;AAFF,KAAD,CAAR;AAID,GAND;AAOD,CARM;AAUP,OAAO,MAAME,UAAU,GAAIZ,OAAD,IAAa;AACrC,SAAO,MAAMS,QAAN,IAAkB;AACvBA,IAAAA,QAAQ,CAAE;AACRX,MAAAA,IAAI,EAAE,UADE;AAERE,MAAAA;AAFQ,KAAF,CAAR;AAID,GALD;AAMD,CAPM;AASP,OAAO,MAAMa,aAAa,GAAIT,IAAD,IAAU;AACrC,SAAO,MAAMK,QAAN,IAAkB;AACvB,UAAMK,WAAW,GAAG,MAAM1B,WAAW,CAAC2B,MAAZ,CAAmB,EAAE,GAAGX,IAAL;AAAWZ,MAAAA,KAAK,EAAEY,IAAI,CAACZ,KAAL,GAAa,CAA/B;AAAkCwB,MAAAA,IAAI,EAAEZ,IAAI,CAACY,IAAL,CAAUX;AAAlD,KAAnB,CAA1B;AACAI,IAAAA,QAAQ,CAAC;AACPX,MAAAA,IAAI,EAAE,gBADC;AAEPC,MAAAA,OAAO,EAAEe;AAFF,KAAD,CAAR;AAID,GAND;AAOD,CARM;AAUP,OAAO,MAAMG,UAAU,GAAIZ,EAAD,IAAQ;AAChC,SAAO,MAAMI,QAAN,IAAkB;AACvB,UAAMrB,WAAW,CAAC6B,UAAZ,CAAuBZ,EAAvB,CAAN;AACAI,IAAAA,QAAQ,CAAC;AACPX,MAAAA,IAAI,EAAE,aADC;AAEPI,MAAAA,IAAI,EAAEG;AAFC,KAAD,CAAR;AAID,GAND;AAOD,CARM;AAUP,eAAeZ,WAAf","sourcesContent":["import blogService from '../services/blogs'\n\nconst byLikes = (a1, a2) => a2.likes - a1.likes\n\nconst blogReducer = (state = [], action) => {\n  console.log('state now: ', state)\n  console.log('action', action)\n  switch(action.type) {\n  case 'INIT_BLOGS': {\n    return action.payload\n  }\n  case 'NEW_BLOG': {\n    return [...state, action.content]\n  }\n  case 'INCREASE_LIKES': {\n    const likedBlog = action.data\n    return state.map(blog => likedBlog.id===blog.id ? likedBlog : blog).sort(byLikes)\n    // return console.log(state.map(blog => console.log(typeof blog.id)), typeof action.data.id)\n  }\n  case 'DELETE_BLOG': {\n    console.log(action.data)\n    return state.filter(blog => blog.id !== action.data)\n  }\n  default:\n    return state\n  }\n}\n\nexport const initBlogs = () => {\n  return async dispatch => {\n    const blogs = await blogService.getAll()\n    dispatch({\n      type: 'INIT_BLOGS',\n      payload: blogs\n    })\n  }\n}\n\nexport const createBlog = (content) => {\n  return async dispatch => {\n    dispatch ({\n      type: 'NEW_BLOG',\n      content\n    })\n  }\n}\n\nexport const increaseLikes = (blog) => {\n  return async dispatch => {\n    const updateLikes = await blogService.update({ ...blog, likes: blog.likes + 1, user: blog.user.id })\n    dispatch({\n      type: 'INCREASE_LIKES',\n      payload: updateLikes\n    })\n  }\n}\n\nexport const deleteBlog = (id) => {\n  return async dispatch => {\n    await blogService.deleteBlog(id)\n    dispatch({\n      type: 'DELETE_BLOG',\n      data: id\n    })\n  }\n}\n\nexport default blogReducer"]},"metadata":{},"sourceType":"module"}