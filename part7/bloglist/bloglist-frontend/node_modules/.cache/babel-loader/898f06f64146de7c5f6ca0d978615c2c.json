{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/alexdring/Documents/fullstackopen/part0-part9-excercises/part7/bloglist/bloglist-frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'; // import loginService from './services/login'\n// import BlogList from './components/BlogList'\n// import BlogForm from './components/BlogForm'\n// import Togglable from './components/Togglable'\n\nimport Home from './components/Home';\nimport Notification from './components/Notification';\nimport LoginForm from './components/LoginForm';\nimport Logout from './components/Logout';\nimport { useDispatch, useSelector } from 'react-redux'; // import { setNotification } from './reducers/notificationReducer'\n\nimport { initBlogs } from './reducers/blogReducer';\nimport { loadUser } from './reducers/userReducer';\n\nconst App = () => {\n  _s();\n\n  const dispatch = useDispatch(); // const [user, setUser] = useState(null)\n\n  const user = useSelector(state => state.user); // const [username, setUsername] = useState('')\n  // const [password, setPassword] = useState('')\n\n  useEffect(() => {\n    dispatch(initBlogs());\n  }, []);\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem('loggedInUser');\n\n    if (loggedInUser) {\n      const parsed = JSON.parse(loggedInUser);\n      dispatch(loadUser(parsed));\n    }\n\n    console.log(loggedInUser);\n  }, []); // const handleLogin = async (event) => {\n  //   event.preventDefault()\n  //   console.log('Form Login', username, password)\n  //   try {\n  //     const user = await loginService.login({\n  //       username, password\n  //     })// this gets routed through services/login.js to the backend where the credentials are checked. If ok the username, name and token are stored in the user state.\n  //     blogService.setToken(user.token)\n  //     setUser(user)\n  //     window.localStorage.setItem('loggedInUser', JSON.stringify(user))\n  //     setUsername('')\n  //     setPassword('')\n  //   } catch(error) {\n  //     // notify(error.response.data.error, 'error')\n  //     dispatch(setNotification({ message: error.response.data.error, class: 'error' }))\n  //   }\n  // }\n  // const addBlog = async (blogObject) => {\n  //   try {\n  //     const addedBlog = await blogService.create(blogObject)\n  //     blogFormRef.current.visibilityToggle()\n  //     setBlogs(blogs.concat(addedBlog))\n  //     dispatch(setNotification({ message: `${addedBlog.title} by ${addedBlog.author} has been added`, class: 'success' }))\n  //   } catch(error) {\n  //     dispatch(setNotification({ message: `blog not added - ${error.response.data.error}`, class: 'error' }))\n  //   }\n  // }\n  // const updateBlog = async (blogObject) => {\n  //   try {\n  //     console.log('updating', blogObject)\n  //     const changedBlog = await blogService.update(blogObject)\n  //     const response = blogs.map(blog => blog.id === blogObject.id ? changedBlog : blog )\n  //     setBlogs(response)\n  //   } catch(error) {\n  //     // notify(`blog not changed - ${error.response.data.error}`, 'error')\n  //     dispatch(setNotification({ message: `blog not changed - ${error.response.data.error}`, class: 'error' }))\n  //     console.log(error)\n  //   }\n  // }\n  // const removeBlog = async (blogObject) => {\n  //   try {\n  //     if(window.confirm(`remove ${blogObject.title} by ${blogObject.author}?`)) {\n  //       blogService.deleteBlog(blogObject.id)\n  //       const filteredBlogs = blogs.filter((blog) => blog.id !== blogObject.id)\n  //       setBlogs(filteredBlogs)\n  //     }\n  //   } catch(error) {\n  //     console.log(error)\n  //   }\n  // }\n\n  if (user === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Notification, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LoginForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"blogs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Notification, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Logout, {\n      name: user.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        children: /*#__PURE__*/_jsxDEV(Home, {\n          user: user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"RUHp4IaJB2p6foE2ZZJO+9sRoNA=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/alexdring/Documents/fullstackopen/part0-part9-excercises/part7/bloglist/bloglist-frontend/src/App.js"],"names":["React","useEffect","BrowserRouter","Router","Switch","Route","Home","Notification","LoginForm","Logout","useDispatch","useSelector","initBlogs","loadUser","App","dispatch","user","state","loggedInUser","localStorage","getItem","parsed","JSON","parse","console","log","name"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SACEC,aAAa,IAAIC,MADnB,EAEEC,MAFF,EAEUC,KAFV,QAGO,kBAHP,C,CAKA;AAEA;AACA;AACA;;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC,C,CACA;;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,QAAT,QAAyB,wBAAzB;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAMC,QAAQ,GAAGL,WAAW,EAA5B,CADgB,CAGhB;;AACA,QAAMM,IAAI,GAAGL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACD,IAAhB,CAAxB,CAJgB,CAKhB;AACA;;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,QAAQ,CAACH,SAAS,EAAV,CAAR;AACD,GAFQ,EAEN,EAFM,CAAT;AAKAX,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAArB;;AACA,QAAGF,YAAH,EAAiB;AACf,YAAMG,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWL,YAAX,CAAf;AACAH,MAAAA,QAAQ,CAACF,QAAQ,CAACQ,MAAD,CAAT,CAAR;AACD;;AACDG,IAAAA,OAAO,CAACC,GAAR,CAAYP,YAAZ;AACD,GAPQ,EAON,EAPM,CAAT,CAbgB,CAsBhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIF,IAAI,KAAK,IAAb,EAAmB;AACjB,wBACE;AAAA,8BACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAMD;;AAED,sBACE,QAAC,MAAD;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAEA,IAAI,CAACU;AAAnB;AAAA;AAAA;AAAA;AAAA,YAHF,eAKE,QAAC,MAAD;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC;AAAZ;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,GAAZ;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,IAAI,EAAEV;AAAZ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CAzGD;;GAAMF,G;UACaJ,W,EAGJC,W;;;KAJTG,G;AA2GN,eAAeA,GAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch, Route\n} from 'react-router-dom'\n\n// import loginService from './services/login'\n\n// import BlogList from './components/BlogList'\n// import BlogForm from './components/BlogForm'\n// import Togglable from './components/Togglable'\nimport Home from './components/Home'\nimport Notification from './components/Notification'\nimport LoginForm from './components/LoginForm'\nimport Logout from './components/Logout'\n\nimport { useDispatch, useSelector } from 'react-redux'\n// import { setNotification } from './reducers/notificationReducer'\nimport { initBlogs } from './reducers/blogReducer'\nimport { loadUser } from './reducers/userReducer'\n\nconst App = () => {\n  const dispatch = useDispatch()\n\n  // const [user, setUser] = useState(null)\n  const user = useSelector(state => state.user)\n  // const [username, setUsername] = useState('')\n  // const [password, setPassword] = useState('')\n\n  useEffect(() => {\n    dispatch(initBlogs())\n  }, [])\n\n\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem('loggedInUser')\n    if(loggedInUser) {\n      const parsed = JSON.parse(loggedInUser)\n      dispatch(loadUser(parsed))\n    }\n    console.log(loggedInUser)\n  }, [])\n\n  // const handleLogin = async (event) => {\n  //   event.preventDefault()\n  //   console.log('Form Login', username, password)\n  //   try {\n  //     const user = await loginService.login({\n  //       username, password\n  //     })// this gets routed through services/login.js to the backend where the credentials are checked. If ok the username, name and token are stored in the user state.\n  //     blogService.setToken(user.token)\n  //     setUser(user)\n  //     window.localStorage.setItem('loggedInUser', JSON.stringify(user))\n  //     setUsername('')\n  //     setPassword('')\n  //   } catch(error) {\n  //     // notify(error.response.data.error, 'error')\n  //     dispatch(setNotification({ message: error.response.data.error, class: 'error' }))\n  //   }\n  // }\n\n\n  // const addBlog = async (blogObject) => {\n  //   try {\n  //     const addedBlog = await blogService.create(blogObject)\n  //     blogFormRef.current.visibilityToggle()\n  //     setBlogs(blogs.concat(addedBlog))\n  //     dispatch(setNotification({ message: `${addedBlog.title} by ${addedBlog.author} has been added`, class: 'success' }))\n  //   } catch(error) {\n  //     dispatch(setNotification({ message: `blog not added - ${error.response.data.error}`, class: 'error' }))\n  //   }\n  // }\n\n\n  // const updateBlog = async (blogObject) => {\n  //   try {\n  //     console.log('updating', blogObject)\n  //     const changedBlog = await blogService.update(blogObject)\n  //     const response = blogs.map(blog => blog.id === blogObject.id ? changedBlog : blog )\n  //     setBlogs(response)\n  //   } catch(error) {\n  //     // notify(`blog not changed - ${error.response.data.error}`, 'error')\n  //     dispatch(setNotification({ message: `blog not changed - ${error.response.data.error}`, class: 'error' }))\n  //     console.log(error)\n  //   }\n  // }\n\n  // const removeBlog = async (blogObject) => {\n  //   try {\n  //     if(window.confirm(`remove ${blogObject.title} by ${blogObject.author}?`)) {\n  //       blogService.deleteBlog(blogObject.id)\n  //       const filteredBlogs = blogs.filter((blog) => blog.id !== blogObject.id)\n  //       setBlogs(filteredBlogs)\n  //     }\n  //   } catch(error) {\n  //     console.log(error)\n  //   }\n  // }\n\n  if (user === null) {\n    return (\n      <div>\n        <Notification />\n        <LoginForm />\n      </div>\n    )\n  }\n\n  return (\n    <Router>\n      <h2>blogs</h2>\n      <Notification />\n      <Logout name={user.name} />\n\n      <Switch>\n        <Route path='/users'>\n          {/* <Users /> */}\n        </Route>\n        <Route path='/' >\n          <Home user={user} />\n        </Route>\n      </Switch>\n\n    </Router>\n  )\n\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}