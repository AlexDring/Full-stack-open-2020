{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/alexdring/Documents/fullstackopen/part0-part9-excercises/part7/bloglist/bloglist-frontend/src/components/Togglable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useImperativeHandle } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from '@material-ui/core'; // const Togglable = (props) => {\n// eslint-disable-next-line react/display-name\n\nconst Togglable = /*#__PURE__*/React.forwardRef(_c = _s((props, ref) => {\n  _s();\n\n  // TODO React.forwardRef creates a React component that forwards the ref attribute it receives to another component below in the tree. - https://fullstackopen.com/en/part5/props_children_and_proptypes#references-to-components-with-ref\n  const [visibility, setVisibility] = useState(false);\n  const hideWhenVisible = {\n    display: visibility ? 'none' : ''\n  };\n  const showWhenVisible = {\n    display: visibility ? '' : 'none'\n  };\n\n  const visibilityToggle = () => {\n    setVisibility(!visibility);\n  };\n\n  useImperativeHandle(ref, () => {\n    //TODO useImperativeHandle customizes the instance value that is exposed to parent components when using ref. In this instance, the parent component, App, that renders the Togglable component would be able to call blogFormRef.current.visibilityToggle().\n    return {\n      visibilityToggle\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: hideWhenVisible,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        id: \"visibility-show\",\n        onClick: visibilityToggle,\n        children: props.buttonLabel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: showWhenVisible,\n      children: [props.children, /*#__PURE__*/_jsxDEV(Button, {\n        onClick: visibilityToggle,\n        children: \"cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}, \"bdU2ipB9ViCiekHcYJ4YjH903Qw=\", false, function () {\n  return [useImperativeHandle];\n}));\n_c2 = Togglable;\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired\n};\nexport default Togglable;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Togglable$React.forwardRef\");\n$RefreshReg$(_c2, \"Togglable\");","map":{"version":3,"sources":["/Users/alexdring/Documents/fullstackopen/part0-part9-excercises/part7/bloglist/bloglist-frontend/src/components/Togglable.js"],"names":["React","useState","useImperativeHandle","PropTypes","Button","Togglable","forwardRef","props","ref","visibility","setVisibility","hideWhenVisible","display","showWhenVisible","visibilityToggle","buttonLabel","children","propTypes","string","isRequired"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,mBAA1B,QAAqD,OAArD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,QAAuB,mBAAvB,C,CAEA;AACA;;AACA,MAAMC,SAAS,gBAAGL,KAAK,CAACM,UAAN,SAAiB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAAA;;AAAE;AAEnD,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,KAAD,CAA5C;AAEA,QAAMU,eAAe,GAAG;AAAEC,IAAAA,OAAO,EAAEH,UAAU,GAAG,MAAH,GAAY;AAAjC,GAAxB;AACA,QAAMI,eAAe,GAAG;AAAED,IAAAA,OAAO,EAAEH,UAAU,GAAG,EAAH,GAAQ;AAA7B,GAAxB;;AAEA,QAAMK,gBAAgB,GAAG,MAAM;AAC7BJ,IAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACD,GAFD;;AAIAP,EAAAA,mBAAmB,CAACM,GAAD,EAAM,MAAM;AAAE;AAC/B,WAAO;AACLM,MAAAA;AADK,KAAP;AAGD,GAJkB,CAAnB;AAMA,sBACE;AAAA,4BACE;AAAK,MAAA,KAAK,EAAEH,eAAZ;AAAA,6BACE,QAAC,MAAD;AAAQ,QAAA,EAAE,EAAC,iBAAX;AAA6B,QAAA,OAAO,EAAEG,gBAAtC;AAAA,kBAAyDP,KAAK,CAACQ;AAA/D;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAK,MAAA,KAAK,EAAEF,eAAZ;AAAA,iBACGN,KAAK,CAACS,QADT,eAEE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAEF,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CA5BiB;AAAA,UAWhBZ,mBAXgB;AAAA,GAAlB;MAAMG,S;AA6BNA,SAAS,CAACY,SAAV,GAAsB;AACpBF,EAAAA,WAAW,EAAEZ,SAAS,CAACe,MAAV,CAAiBC;AADV,CAAtB;AAIA,eAAed,SAAf","sourcesContent":["import React, { useState, useImperativeHandle } from 'react'\nimport PropTypes from 'prop-types'\nimport { Button } from '@material-ui/core'\n\n// const Togglable = (props) => {\n// eslint-disable-next-line react/display-name\nconst Togglable = React.forwardRef((props, ref) => { // TODO React.forwardRef creates a React component that forwards the ref attribute it receives to another component below in the tree. - https://fullstackopen.com/en/part5/props_children_and_proptypes#references-to-components-with-ref\n\n  const [visibility, setVisibility] = useState(false)\n\n  const hideWhenVisible = { display: visibility ? 'none' : '' }\n  const showWhenVisible = { display: visibility ? '' : 'none' }\n\n  const visibilityToggle = () => {\n    setVisibility(!visibility)\n  }\n\n  useImperativeHandle(ref, () => { //TODO useImperativeHandle customizes the instance value that is exposed to parent components when using ref. In this instance, the parent component, App, that renders the Togglable component would be able to call blogFormRef.current.visibilityToggle().\n    return {\n      visibilityToggle\n    }\n  })\n\n  return(\n    <div>\n      <div style={hideWhenVisible}>\n        <Button id='visibility-show' onClick={visibilityToggle}>{props.buttonLabel}</Button>\n      </div>\n      <div style={showWhenVisible}>\n        {props.children}\n        <Button onClick={visibilityToggle}>cancel</Button>\n      </div>\n    </div>\n  )\n})\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired\n}\n\nexport default Togglable"]},"metadata":{},"sourceType":"module"}