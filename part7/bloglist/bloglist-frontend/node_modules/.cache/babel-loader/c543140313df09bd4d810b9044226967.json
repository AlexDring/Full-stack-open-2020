{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport notificationReducer from './reducers/notificationReducer';\nimport blogReducer from './reducers/blogReducer';\nimport blogService from './services/blogs';\nconst reducer = combineReducers({\n  blogs: blogReducer,\n  notification: notificationReducer\n});\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\nblogService.getAll().then(blog => blog.forEach(blog => {\n  store.dispatch({\n    type: 'NEW_BLOG',\n    content: blog\n  });\n}));\nexport default store;","map":{"version":3,"sources":["/Users/alexdring/Documents/fullstackopen/part0-part9-excercises/part7/bloglist/bloglist-frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","notificationReducer","blogReducer","blogService","reducer","blogs","notification","store","getAll","then","blog","forEach","dispatch","type","content"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,mBAAP,MAAgC,gCAAhC;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AAEA,OAAOC,WAAP,MAAwB,kBAAxB;AAEA,MAAMC,OAAO,GAAGP,eAAe,CAAC;AAC9BQ,EAAAA,KAAK,EAAEH,WADuB;AAE9BI,EAAAA,YAAY,EAAEL;AAFgB,CAAD,CAA/B;AAKA,MAAMM,KAAK,GAAGX,WAAW,CACvBQ,OADuB,EAEvBJ,mBAAmB,CACjBF,eAAe,CAACC,KAAD,CADE,CAFI,CAAzB;AAOAI,WAAW,CAACK,MAAZ,GAAqBC,IAArB,CAA0BC,IAAI,IAC5BA,IAAI,CAACC,OAAL,CAAaD,IAAI,IAAI;AACnBH,EAAAA,KAAK,CAACK,QAAN,CAAe;AAAEC,IAAAA,IAAI,EAAE,UAAR;AAAoBC,IAAAA,OAAO,EAAEJ;AAA7B,GAAf;AACD,CAFD,CADF;AAKA,eAAeH,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport notificationReducer from './reducers/notificationReducer'\nimport blogReducer from './reducers/blogReducer'\n\nimport blogService from './services/blogs'\n\nconst reducer = combineReducers({\n  blogs: blogReducer,\n  notification: notificationReducer\n})\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk)\n  )\n)\n\nblogService.getAll().then(blog =>\n  blog.forEach(blog => {\n    store.dispatch({ type: 'NEW_BLOG', content: blog})\n  }))\n\nexport default store"]},"metadata":{},"sourceType":"module"}