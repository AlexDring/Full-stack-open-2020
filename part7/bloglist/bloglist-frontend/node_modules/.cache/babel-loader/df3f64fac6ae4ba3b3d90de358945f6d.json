{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport notificationReducer from './reducers/notificationReducer';\nimport blogReducer, { initBlogs } from './reducers/blogReducer';\nimport blogService from './services/blogs';\nconst reducer = combineReducers({\n  blogs: blogReducer,\n  notification: notificationReducer\n});\nconst store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));\nblogService.getAll().then(blog => blog.forEach(blog => {\n  store.dispatch(initBlogs(blog));\n}));\nexport default store;","map":{"version":3,"sources":["/Users/alexdring/Documents/fullstackopen/part0-part9-excercises/part7/bloglist/bloglist-frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","notificationReducer","blogReducer","initBlogs","blogService","reducer","blogs","notification","store","getAll","then","blog","forEach","dispatch"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,mBAAP,MAAgC,gCAAhC;AACA,OAAOC,WAAP,IAAsBC,SAAtB,QAAuC,wBAAvC;AAEA,OAAOC,WAAP,MAAwB,kBAAxB;AAEA,MAAMC,OAAO,GAAGR,eAAe,CAAC;AAC9BS,EAAAA,KAAK,EAAEJ,WADuB;AAE9BK,EAAAA,YAAY,EAAEN;AAFgB,CAAD,CAA/B;AAKA,MAAMO,KAAK,GAAGZ,WAAW,CACvBS,OADuB,EAEvBL,mBAAmB,CACjBF,eAAe,CAACC,KAAD,CADE,CAFI,CAAzB;AAOAK,WAAW,CAACK,MAAZ,GAAqBC,IAArB,CAA0BC,IAAI,IAC5BA,IAAI,CAACC,OAAL,CAAaD,IAAI,IAAI;AACnBH,EAAAA,KAAK,CAACK,QAAN,CAAeV,SAAS,CAACQ,IAAD,CAAxB;AACD,CAFD,CADF;AAKA,eAAeH,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport notificationReducer from './reducers/notificationReducer'\nimport blogReducer, { initBlogs } from './reducers/blogReducer'\n\nimport blogService from './services/blogs'\n\nconst reducer = combineReducers({\n  blogs: blogReducer,\n  notification: notificationReducer\n})\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk)\n  )\n)\n\nblogService.getAll().then(blog =>\n  blog.forEach(blog => {\n    store.dispatch(initBlogs(blog))\n  }))\n\nexport default store"]},"metadata":{},"sourceType":"module"}