{"ast":null,"code":"import blogService from '../services/blogs'; // const byLikes = (a1, a2) => a2.likes - a1.likes\n\nconst blogReducer = (state = [], action) => {\n  // console.log('state now: ', state)\n  // console.log('action', action)\n  switch (action.type) {\n    case 'INIT_BLOGS':\n      {\n        return action.payload;\n      }\n\n    case 'NEW_BLOG':\n      {\n        return [...state, action.payload];\n      }\n\n    case 'INCREASE_LIKES':\n      {\n        const likedBlog = action.payload;\n        console.log(likedBlog);\n        return state.map(blog => likedBlog.id === blog.id ? likedBlog : blog);\n      }\n\n    case 'DELETE_BLOG':\n      {\n        console.log(action.data);\n        return state.filter(blog => blog.id !== action.data);\n      }\n\n    case 'NEW_COMMENT':\n      {\n        return state.map(blog => {\n          if (blog.id !== action.payload.blogId) {\n            return blog;\n          }\n\n          return { ...blog,\n            comments: [...blog.comments, action.payload.comment]\n          };\n        });\n      }\n    // return state.map(blog => {\n    //   // eslint-disable-next-line no-debugger\n    //   debugger\n    //   blog.id !== action.payload.blogId\n    //     ? blog\n    //     : { ...blog, comments: [...blog.comments, action.payload.comment] }\n    // })}\n\n    default:\n      return state;\n  }\n};\n\nexport const newComment = comment => {\n  console.log(comment);\n  return async dispatch => {\n    const createdComment = await blogService.createComment(comment);\n    console.log('post service', createdComment);\n    const newComment = {\n      comment: createdComment,\n      blogId: comment.blogId\n    };\n    dispatch({\n      type: 'NEW_COMMENT',\n      payload: newComment\n    });\n  };\n};\nexport const initBlogs = () => {\n  return async dispatch => {\n    const blogs = await blogService.getAll();\n    dispatch({\n      type: 'INIT_BLOGS',\n      payload: blogs\n    });\n  };\n};\nexport const createBlog = newBlog => {\n  return async dispatch => {\n    const addedBlog = await blogService.create(newBlog);\n    dispatch({\n      type: 'NEW_BLOG',\n      payload: addedBlog\n    });\n  };\n};\nexport const increaseLikes = blog => {\n  console.log('test', blog);\n  return async dispatch => {\n    // const likedBlog = { ...blog, likes: blog.likes + 1, user: blog.user.id }\n    const updateLikes = await blogService.update({ ...blog,\n      likes: blog.likes + 1,\n      user: blog.user.id\n    });\n    console.log('updateLikes', updateLikes);\n    dispatch({\n      type: 'INCREASE_LIKES',\n      payload: updateLikes\n    });\n  };\n};\nexport const deleteBlog = id => {\n  return async dispatch => {\n    await blogService.deleteBlog(id);\n    dispatch({\n      type: 'DELETE_BLOG',\n      data: id\n    });\n  };\n};\nexport default blogReducer;","map":{"version":3,"sources":["/Users/alexdring/Documents/fullstackopen/part0-part9-excercises/part7/bloglist/bloglist-frontend/src/reducers/blogReducer.js"],"names":["blogService","blogReducer","state","action","type","payload","likedBlog","console","log","map","blog","id","data","filter","blogId","comments","comment","newComment","dispatch","createdComment","createComment","initBlogs","blogs","getAll","createBlog","newBlog","addedBlog","create","increaseLikes","updateLikes","update","likes","user","deleteBlog"],"mappings":"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","sourcesContent":["import blogService from '../services/blogs'\n\n// const byLikes = (a1, a2) => a2.likes - a1.likes\n\nconst blogReducer = (state = [], action) => {\n  // console.log('state now: ', state)\n  // console.log('action', action)\n  switch(action.type) {\n  case 'INIT_BLOGS': {\n    return action.payload\n  }\n  case 'NEW_BLOG': {\n    return [...state, action.payload]\n  }\n  case 'INCREASE_LIKES': {\n    const likedBlog = action.payload\n    console.log(likedBlog)\n    return state.map(blog => likedBlog.id===blog.id ? likedBlog : blog)\n  }\n  case 'DELETE_BLOG': {\n    console.log(action.data)\n    return state.filter(blog => blog.id !== action.data)\n  }\n  case 'NEW_COMMENT': {\n    return state.map(blog => {\n      if (blog.id !== action.payload.blogId) {\n        return blog\n      }\n      return {\n        ...blog,\n        comments: [...blog.comments, action.payload.comment]\n      }\n    })}\n  // return state.map(blog => {\n  //   // eslint-disable-next-line no-debugger\n  //   debugger\n  //   blog.id !== action.payload.blogId\n  //     ? blog\n  //     : { ...blog, comments: [...blog.comments, action.payload.comment] }\n  // })}\n  default:\n    return state\n  }\n}\n\nexport const newComment = (comment) => {\n  console.log(comment)\n  return async dispatch => {\n    const createdComment = await blogService.createComment(comment)\n    console.log('post service', createdComment)\n    const newComment = {\n      comment: createdComment,\n      blogId: comment.blogId\n    }\n    dispatch({\n      type: 'NEW_COMMENT',\n      payload: newComment\n    })\n  }\n}\n\nexport const initBlogs = () => {\n  return async dispatch => {\n    const blogs = await blogService.getAll()\n    dispatch({\n      type: 'INIT_BLOGS',\n      payload: blogs\n    })\n  }\n}\n\nexport const createBlog = (newBlog) => {\n  return async dispatch => {\n    const addedBlog = await blogService.create(newBlog)\n    dispatch ({\n      type: 'NEW_BLOG',\n      payload: addedBlog\n    })\n  }\n}\n\nexport const increaseLikes = (blog) => {\n  console.log('test', blog)\n  return async dispatch => {\n    // const likedBlog = { ...blog, likes: blog.likes + 1, user: blog.user.id }\n    const updateLikes = await blogService.update({ ...blog, likes: blog.likes + 1, user: blog.user.id })\n    console.log('updateLikes', updateLikes)\n    dispatch({\n      type: 'INCREASE_LIKES',\n      payload: updateLikes\n    })\n  }\n}\n\nexport const deleteBlog = (id) => {\n  return async dispatch => {\n    await blogService.deleteBlog(id)\n    dispatch({\n      type: 'DELETE_BLOG',\n      data: id\n    })\n  }\n}\n\nexport default blogReducer"]},"metadata":{},"sourceType":"module"}