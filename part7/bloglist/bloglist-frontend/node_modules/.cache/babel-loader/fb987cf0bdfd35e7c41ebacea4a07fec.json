{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/alexdring/Documents/fullstackopen/part0-part9-excercises/part7/bloglist/bloglist-frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react'; // import blogService from './services/blogs'\n// import loginService from './services/login'\n\nimport BlogList from './components/BlogList';\nimport BlogForm from './components/BlogForm';\nimport Togglable from './components/Togglable';\nimport Notification from './components/Notification';\nimport LoginForm from './components/LoginForm';\nimport { useDispatch, useSelector } from 'react-redux'; // import { setNotification } from './reducers/notificationReducer'\n\nimport { initBlogs } from './reducers/blogReducer'; // import userLogin from './reducers/userReducer'\n\nimport { userLogout } from './reducers/userReducer';\n\nconst App = () => {\n  _s();\n\n  const dispatch = useDispatch(); // const [user, setUser] = useState(null)\n\n  const user = useSelector(state => state.user); // const [username, setUsername] = useState('')\n  // const [password, setPassword] = useState('')\n\n  useEffect(() => {\n    dispatch(initBlogs());\n  }, []);\n  const blogFormRef = /*#__PURE__*/React.createRef(); // TODO https://fullstackopen.com/en/part5/props_children_and_proptypes#references-to-components-with-ref\n  // useEffect(() => {\n  //   const loggedInUser = localStorage.getItem('loggedInUser')\n  //   if(loggedInUser) {\n  //     console.log('LOGGED',loggedInUser)\n  //     const parsed = JSON.parse(loggedInUser)\n  //     console.log('parseduser',parsed)\n  //     dispatch(userLogin(user))\n  //     // setUser(user)\n  //     blogService.setToken(user.token)\n  //   }\n  //   console.log(loggedInUser)\n  // }, [])\n  //TODO WHY IS THIS HEREEEE? Does it need removing as use rinfo is stored in store now?\n  // const handleLogin = async (event) => {\n  //   event.preventDefault()\n  //   console.log('Form Login', username, password)\n  //   try {\n  //     const user = await loginService.login({\n  //       username, password\n  //     })// this gets routed through services/login.js to the backend where the credentials are checked. If ok the username, name and token are stored in the user state.\n  //     blogService.setToken(user.token)\n  //     setUser(user)\n  //     window.localStorage.setItem('loggedInUser', JSON.stringify(user))\n  //     setUsername('')\n  //     setPassword('')\n  //   } catch(error) {\n  //     // notify(error.response.data.error, 'error')\n  //     dispatch(setNotification({ message: error.response.data.error, class: 'error' }))\n  //   }\n  // }\n\n  const handleLogout = e => {\n    e.preventDefault();\n    window.localStorage.removeItem('loggedInUser');\n    dispatch(userLogout()); // setUser(null)\n  }; // const addBlog = async (blogObject) => {\n  //   try {\n  //     const addedBlog = await blogService.create(blogObject)\n  //     blogFormRef.current.visibilityToggle()\n  //     setBlogs(blogs.concat(addedBlog))\n  //     dispatch(setNotification({ message: `${addedBlog.title} by ${addedBlog.author} has been added`, class: 'success' }))\n  //   } catch(error) {\n  //     dispatch(setNotification({ message: `blog not added - ${error.response.data.error}`, class: 'error' }))\n  //   }\n  // }\n  // const updateBlog = async (blogObject) => {\n  //   try {\n  //     console.log('updating', blogObject)\n  //     const changedBlog = await blogService.update(blogObject)\n  //     const response = blogs.map(blog => blog.id === blogObject.id ? changedBlog : blog )\n  //     setBlogs(response)\n  //   } catch(error) {\n  //     // notify(`blog not changed - ${error.response.data.error}`, 'error')\n  //     dispatch(setNotification({ message: `blog not changed - ${error.response.data.error}`, class: 'error' }))\n  //     console.log(error)\n  //   }\n  // }\n  // const removeBlog = async (blogObject) => {\n  //   try {\n  //     if(window.confirm(`remove ${blogObject.title} by ${blogObject.author}?`)) {\n  //       blogService.deleteBlog(blogObject.id)\n  //       const filteredBlogs = blogs.filter((blog) => blog.id !== blogObject.id)\n  //       setBlogs(filteredBlogs)\n  //     }\n  //   } catch(error) {\n  //     console.log(error)\n  //   }\n  // }\n\n\n  if (user === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Notification, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LoginForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"blogs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Notification, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Logged in as \", user.name, /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: handleLogout,\n        children: \"logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 36\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"create new\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Togglable, {\n      buttonLabel: \"new blog\",\n      ref: blogFormRef,\n      children: /*#__PURE__*/_jsxDEV(BlogForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"blogs\",\n      children: /*#__PURE__*/_jsxDEV(BlogList, {\n        user: user.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"D+tpgEc7oJbenxkkKtcwSrPV108=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/alexdring/Documents/fullstackopen/part0-part9-excercises/part7/bloglist/bloglist-frontend/src/App.js"],"names":["React","useEffect","BlogList","BlogForm","Togglable","Notification","LoginForm","useDispatch","useSelector","initBlogs","userLogout","App","dispatch","user","state","blogFormRef","createRef","handleLogout","e","preventDefault","window","localStorage","removeItem","name","username"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;AACA;;AAEA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC,C,CACA;;AACA,SAASC,SAAT,QAA0B,wBAA1B,C,CACA;;AACA,SAASC,UAAT,QAA2B,wBAA3B;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAMC,QAAQ,GAAGL,WAAW,EAA5B,CADgB,CAGhB;;AACA,QAAMM,IAAI,GAAGL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACD,IAAhB,CAAxB,CAJgB,CAKhB;AACA;;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,QAAQ,CAACH,SAAS,EAAV,CAAR;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,QAAMM,WAAW,gBAAGf,KAAK,CAACgB,SAAN,EAApB,CAZgB,CAYsB;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMC,YAAY,GAAIC,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACC,cAAF;AACAC,IAAAA,MAAM,CAACC,YAAP,CAAoBC,UAApB,CAA+B,cAA/B;AACAV,IAAAA,QAAQ,CAACF,UAAU,EAAX,CAAR,CAH0B,CAI1B;AACD,GALD,CA9CgB,CAqDhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAIG,IAAI,KAAK,IAAb,EAAmB;AACjB,wBACE;AAAA,8BACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA+BD;;AAED,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,kCAAmBA,IAAI,CAACU,IAAxB,eAA6B;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAEN,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE,QAAC,SAAD;AAAW,MAAA,WAAW,EAAC,UAAvB;AAAkC,MAAA,GAAG,EAAEF,WAAvC;AAAA,6BACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YALF,eASE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,6BAYE,QAAC,QAAD;AAAU,QAAA,IAAI,EAAEF,IAAI,CAACW;AAArB;AAAA;AAAA;AAAA;AAAA;AAZF;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD,CAzJD;;GAAMb,G;UACaJ,W,EAGJC,W;;;KAJTG,G;AA2JN,eAAeA,GAAf","sourcesContent":["import React, { useEffect } from 'react'\n// import blogService from './services/blogs'\n// import loginService from './services/login'\n\nimport BlogList from './components/BlogList'\nimport BlogForm from './components/BlogForm'\nimport Togglable from './components/Togglable'\nimport Notification from './components/Notification'\nimport LoginForm from './components/LoginForm'\n\nimport { useDispatch, useSelector } from 'react-redux'\n// import { setNotification } from './reducers/notificationReducer'\nimport { initBlogs } from './reducers/blogReducer'\n// import userLogin from './reducers/userReducer'\nimport { userLogout } from './reducers/userReducer'\n\nconst App = () => {\n  const dispatch = useDispatch()\n\n  // const [user, setUser] = useState(null)\n  const user = useSelector(state => state.user)\n  // const [username, setUsername] = useState('')\n  // const [password, setPassword] = useState('')\n\n  useEffect(() => {\n    dispatch(initBlogs())\n  }, [])\n\n  const blogFormRef = React.createRef() // TODO https://fullstackopen.com/en/part5/props_children_and_proptypes#references-to-components-with-ref\n\n  // useEffect(() => {\n  //   const loggedInUser = localStorage.getItem('loggedInUser')\n  //   if(loggedInUser) {\n  //     console.log('LOGGED',loggedInUser)\n  //     const parsed = JSON.parse(loggedInUser)\n  //     console.log('parseduser',parsed)\n  //     dispatch(userLogin(user))\n  //     // setUser(user)\n  //     blogService.setToken(user.token)\n  //   }\n  //   console.log(loggedInUser)\n  // }, [])\n  //TODO WHY IS THIS HEREEEE? Does it need removing as use rinfo is stored in store now?\n\n  // const handleLogin = async (event) => {\n  //   event.preventDefault()\n  //   console.log('Form Login', username, password)\n  //   try {\n  //     const user = await loginService.login({\n  //       username, password\n  //     })// this gets routed through services/login.js to the backend where the credentials are checked. If ok the username, name and token are stored in the user state.\n  //     blogService.setToken(user.token)\n  //     setUser(user)\n  //     window.localStorage.setItem('loggedInUser', JSON.stringify(user))\n  //     setUsername('')\n  //     setPassword('')\n  //   } catch(error) {\n  //     // notify(error.response.data.error, 'error')\n  //     dispatch(setNotification({ message: error.response.data.error, class: 'error' }))\n  //   }\n  // }\n\n  const handleLogout = (e) => {\n    e.preventDefault()\n    window.localStorage.removeItem('loggedInUser')\n    dispatch(userLogout())\n    // setUser(null)\n  }\n\n  // const addBlog = async (blogObject) => {\n  //   try {\n  //     const addedBlog = await blogService.create(blogObject)\n  //     blogFormRef.current.visibilityToggle()\n  //     setBlogs(blogs.concat(addedBlog))\n  //     dispatch(setNotification({ message: `${addedBlog.title} by ${addedBlog.author} has been added`, class: 'success' }))\n  //   } catch(error) {\n  //     dispatch(setNotification({ message: `blog not added - ${error.response.data.error}`, class: 'error' }))\n  //   }\n  // }\n\n\n  // const updateBlog = async (blogObject) => {\n  //   try {\n  //     console.log('updating', blogObject)\n  //     const changedBlog = await blogService.update(blogObject)\n  //     const response = blogs.map(blog => blog.id === blogObject.id ? changedBlog : blog )\n  //     setBlogs(response)\n  //   } catch(error) {\n  //     // notify(`blog not changed - ${error.response.data.error}`, 'error')\n  //     dispatch(setNotification({ message: `blog not changed - ${error.response.data.error}`, class: 'error' }))\n  //     console.log(error)\n  //   }\n  // }\n\n  // const removeBlog = async (blogObject) => {\n  //   try {\n  //     if(window.confirm(`remove ${blogObject.title} by ${blogObject.author}?`)) {\n  //       blogService.deleteBlog(blogObject.id)\n  //       const filteredBlogs = blogs.filter((blog) => blog.id !== blogObject.id)\n  //       setBlogs(filteredBlogs)\n  //     }\n  //   } catch(error) {\n  //     console.log(error)\n  //   }\n  // }\n\n  if (user === null) {\n    return (\n      <div>\n        <Notification />\n        <LoginForm />\n        {/* { !notification ? null : <div className={ notification.type === 'success' ? 'success' : 'error' }>{notification.message}</div> } */}\n        {/* {/* <h2>Login to the application</h2>\n        <form id=\"loginForm\" onSubmit={handleLogin}>\n          <div>\n            <input\n              id='username'\n              type='text'\n              value={username}\n              name='username'\n              onChange={({ target }) => setUsername(target.value)}\n              placeholder='username'\n            />\n          </div>\n          <div>\n            <input\n              id='password'\n              type='password'\n              value={password}\n              name='password'\n              onChange={({ target }) => setPassword(target.value)}\n              placeholder='password'\n            />\n          </div>\n          <button id='login-button' type='submit'>login</button>\n        </form> */}\n      </div>\n    )\n  }\n\n  return (\n    <div>\n      <h2>blogs</h2>\n      <Notification />\n      <div>Logged in as {user.name}<button type='submit' onClick={handleLogout}>logout</button></div>\n      <h2>create new</h2>\n      <Togglable buttonLabel='new blog' ref={blogFormRef}>\n        <BlogForm />\n        {/* <BlogForm createBlog={addBlog} /> */}\n      </Togglable>\n      <div className=\"blogs\">\n        {/* {[...blogs]\n          .sort((a,b) => b.likes > a.likes ? 1 : -1)\n          .map(blog =>\n            <Blog\n              key={blog.id}\n              blog={blog}\n              // userCheck={userCheck}\n              owner={user.username === blog.user.username}\n              updateBlog={updateBlog}\n              removeBlog={removeBlog} />\n          )} */}\n        <BlogList user={user.username} />\n\n        {/*REVIEW- https://stackoverflow.com/questions/43572436/sort-an-array-of-objects-in-react-and-render-them*/}\n      </div>\n    </div>\n  )\n\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}