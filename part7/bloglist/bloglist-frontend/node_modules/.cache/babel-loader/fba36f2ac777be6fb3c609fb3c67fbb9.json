{"ast":null,"code":"import blogService from '../services/blogs';\n\nconst byLikes = (a1, a2) => a2.likes - a1.likes;\n\nconst blogReducer = (state = [], action) => {\n  console.log('state now: ', state);\n  console.log('action', action);\n\n  switch (action.type) {\n    case 'INIT_BLOGS':\n      {\n        return action.payload;\n      }\n\n    case 'NEW_BLOG':\n      {\n        return [...state, action.payload];\n      }\n\n    case 'INCREASE_LIKES':\n      {\n        const likedBlog = action.payload;\n        return state.map(blog => likedBlog.id === blog.id ? likedBlog : blog).sort(byLikes);\n      }\n\n    case 'DELETE_BLOG':\n      {\n        console.log(action.data);\n        return state.filter(blog => blog.id !== action.data);\n      }\n\n    case 'NEW_COMMENT':\n      {\n        return state.map(blog => {\n          if (blog.id !== action.payload.blogId) {\n            return blog;\n          }\n\n          return { ...blog,\n            comments: [...blog.comments, action.payload.comment]\n          };\n        });\n      }\n    // return state.map(blog => {\n    //   // eslint-disable-next-line no-debugger\n    //   debugger\n    //   blog.id !== action.payload.blogId\n    //     ? blog\n    //     : { ...blog, comments: [...blog.comments, action.payload.comment] }\n    // })}\n\n    default:\n      return state;\n  }\n};\n\nexport const newComment = comment => {\n  return async dispatch => {\n    const createdComment = await blogService.createComment(comment); // console.log('post service', createdComment)\n\n    const newComment = {\n      comment: createdComment,\n      blogId: comment.blogId\n    };\n    dispatch({\n      type: 'NEW_COMMENT',\n      payload: newComment\n    });\n  };\n};\nexport const initBlogs = () => {\n  return async dispatch => {\n    const blogs = await blogService.getAll();\n    dispatch({\n      type: 'INIT_BLOGS',\n      payload: blogs\n    });\n  };\n};\nexport const createBlog = newBlog => {\n  return async dispatch => {\n    const addedBlog = await blogService.create(newBlog);\n    dispatch({\n      type: 'NEW_BLOG',\n      payload: addedBlog\n    });\n  };\n};\nexport const increaseLikes = blog => {\n  return async dispatch => {\n    const updateLikes = await blogService.update({ ...blog,\n      likes: blog.likes + 1,\n      user: blog.user.id\n    });\n    dispatch({\n      type: 'INCREASE_LIKES',\n      payload: updateLikes\n    });\n  };\n};\nexport const deleteBlog = id => {\n  return async dispatch => {\n    await blogService.deleteBlog(id);\n    dispatch({\n      type: 'DELETE_BLOG',\n      data: id\n    });\n  };\n};\nexport default blogReducer;","map":{"version":3,"sources":["/Users/alexdring/Documents/fullstackopen/part0-part9-excercises/part7/bloglist/bloglist-frontend/src/reducers/blogReducer.js"],"names":["blogService","byLikes","a1","a2","likes","blogReducer","state","action","console","log","type","payload","likedBlog","map","blog","id","sort","data","filter","blogId","comments","comment","newComment","dispatch","createdComment","createComment","initBlogs","blogs","getAll","createBlog","newBlog","addedBlog","create","increaseLikes","updateLikes","update","user","deleteBlog"],"mappings":"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","sourcesContent":["import blogService from '../services/blogs'\n\nconst byLikes = (a1, a2) => a2.likes - a1.likes\n\nconst blogReducer = (state = [], action) => {\n  console.log('state now: ', state)\n  console.log('action', action)\n  switch(action.type) {\n  case 'INIT_BLOGS': {\n    return action.payload\n  }\n  case 'NEW_BLOG': {\n    return [...state, action.payload]\n  }\n  case 'INCREASE_LIKES': {\n    const likedBlog = action.payload\n    return state.map(blog => likedBlog.id===blog.id ? likedBlog : blog).sort(byLikes)\n  }\n  case 'DELETE_BLOG': {\n    console.log(action.data)\n    return state.filter(blog => blog.id !== action.data)\n  }\n  case 'NEW_COMMENT': {\n    return state.map(blog => {\n      if (blog.id !== action.payload.blogId) {\n        return blog\n      }\n      return {\n        ...blog,\n        comments: [...blog.comments, action.payload.comment]\n      }\n    })}\n    // return state.map(blog => {\n    //   // eslint-disable-next-line no-debugger\n    //   debugger\n    //   blog.id !== action.payload.blogId\n    //     ? blog\n    //     : { ...blog, comments: [...blog.comments, action.payload.comment] }\n    // })}\n  default:\n    return state\n  }\n}\n\nexport const newComment = (comment) => {\n\n  return async dispatch => {\n    const createdComment = await blogService.createComment(comment)\n    // console.log('post service', createdComment)\n    const newComment = {\n      comment: createdComment,\n      blogId: comment.blogId\n    }\n    dispatch({\n      type: 'NEW_COMMENT',\n      payload: newComment\n    })\n  }\n}\n\nexport const initBlogs = () => {\n  return async dispatch => {\n    const blogs = await blogService.getAll()\n    dispatch({\n      type: 'INIT_BLOGS',\n      payload: blogs\n    })\n  }\n}\n\nexport const createBlog = (newBlog) => {\n  return async dispatch => {\n    const addedBlog = await blogService.create(newBlog)\n    dispatch ({\n      type: 'NEW_BLOG',\n      payload: addedBlog\n    })\n  }\n}\n\nexport const increaseLikes = (blog) => {\n  return async dispatch => {\n    const updateLikes = await blogService.update({ ...blog, likes: blog.likes + 1, user: blog.user.id })\n    dispatch({\n      type: 'INCREASE_LIKES',\n      payload: updateLikes\n    })\n  }\n}\n\nexport const deleteBlog = (id) => {\n  return async dispatch => {\n    await blogService.deleteBlog(id)\n    dispatch({\n      type: 'DELETE_BLOG',\n      data: id\n    })\n  }\n}\n\nexport default blogReducer"]},"metadata":{},"sourceType":"module"}